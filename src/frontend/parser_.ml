(*
  !!! テスト用です
  !!! lexerが正常に動作することを確認したら削除する
*)


type token =
  | VAR of (Range.t * Types.token_data * Types.var_name)
  | HORZCMD of (Range.t * Types.token_data * Types.ctrlseq_name)
  | HORZMACRO of (Range.t * Types.token_data * Types.ctrlseq_name)
  | VERTCMD of (Range.t * Types.token_data * Types.ctrlseq_name)
  | VERTMACRO of (Range.t * Types.token_data * Types.ctrlseq_name)
  | MATHCMD of (Range.t * Types.token_data * Types.ctrlseq_name)
  | VARWITHMOD of (Range.t * Types.token_data * (Types.module_name list) * Types.var_name)
  | HORZCMDWITHMOD of (Range.t * Types.token_data * (Types.module_name list) * Types.ctrlseq_name)
  | VERTCMDWITHMOD of (Range.t * Types.token_data * (Types.module_name list) * Types.ctrlseq_name)
  | MATHCMDWITHMOD of (Range.t * Types.token_data * (Types.module_name list) * Types.ctrlseq_name)
  | VARINHORZ of (Range.t * Types.token_data * (Types.module_name list) * Types.ctrlseq_name)
  | VARINVERT of (Range.t * Types.token_data * (Types.module_name list) * Types.ctrlseq_name)
  | VARINMATH of (Range.t * Types.token_data * (Types.module_name list) * Types.var_name)
  | TYPEVAR of (Range.t * Types.token_data * Types.var_name)
  | CONSTRUCTOR of (Range.t * Types.token_data * Types.constructor_name)
  | INTCONST of (Range.t * Types.token_data * int)
  | FLOATCONST of (Range.t * Types.token_data * float)
  | LENGTHCONST of (Range.t * Types.token_data * float * Types.length_unit_name)
  | CHAR of (Range.t * Types.token_data * string)
  | LITERAL of (Range.t * Types.token_data * string * bool * bool)
  | POSITIONED_LITERAL of (Range.t * Types.token_data * Types.input_position * string)
  | SPACE of (Range.t * Types.token_data)
  | BREAK of (Range.t * Types.token_data)
  | MATHCHARS of (Range.t * Types.token_data * string)
  | PRIMES of (Range.t * Types.token_data * int)
  | SUBSCRIPT of (Range.t * Types.token_data)
  | SUPERSCRIPT of (Range.t * Types.token_data)
  | LAMBDA of (Range.t * Types.token_data)
  | ARROW of (Range.t * Types.token_data)
  | COMMAND of (Range.t * Types.token_data)
  | LETREC of (Range.t * Types.token_data)
  | LETNONREC of (Range.t * Types.token_data)
  | DEFEQ of (Range.t * Types.token_data)
  | LETAND of (Range.t * Types.token_data)
  | IN of (Range.t * Types.token_data)
  | OPEN of (Range.t * Types.token_data)
  | OPENMODULE of (Range.t * Types.token_data * Types.module_name)
  | MODULE of (Range.t * Types.token_data)
  | STRUCT of (Range.t * Types.token_data)
  | END of (Range.t * Types.token_data)
  | DIRECT of (Range.t * Types.token_data)
  | SIG of (Range.t * Types.token_data)
  | VAL of (Range.t * Types.token_data)
  | CONSTRAINT of (Range.t * Types.token_data)
  | TYPE of (Range.t * Types.token_data)
  | OF of (Range.t * Types.token_data)
  | MATCH of (Range.t * Types.token_data)
  | WITH of (Range.t * Types.token_data)
  | BAR of (Range.t * Types.token_data)
  | WILDCARD of (Range.t * Types.token_data)
  | WHEN of (Range.t * Types.token_data)
  | AS of (Range.t * Types.token_data)
  | COLON of (Range.t * Types.token_data)
  | LETMUTABLE of (Range.t * Types.token_data)
  | OVERWRITEEQ of (Range.t * Types.token_data)
  | LETHORZ of (Range.t * Types.token_data)
  | LETVERT of (Range.t * Types.token_data)
  | LETMATH of (Range.t * Types.token_data)
  | IF of (Range.t * Types.token_data)
  | THEN of (Range.t * Types.token_data)
  | ELSE of (Range.t * Types.token_data)
  | BINOP_TIMES of (Range.t * Types.token_data * Types.var_name)
  | BINOP_DIVIDES of (Range.t * Types.token_data * Types.var_name)
  | BINOP_PLUS of (Range.t * Types.token_data * Types.var_name)
  | BINOP_MINUS of (Range.t * Types.token_data * Types.var_name)
  | BINOP_HAT of (Range.t * Types.token_data * Types.var_name)
  | BINOP_AMP of (Range.t * Types.token_data * Types.var_name)
  | BINOP_BAR of (Range.t * Types.token_data * Types.var_name)
  | BINOP_GT of (Range.t * Types.token_data * Types.var_name)
  | BINOP_LT of (Range.t * Types.token_data * Types.var_name)
  | BINOP_EQ of (Range.t * Types.token_data * Types.var_name)
  | UNOP_EXCLAM of (Range.t * Types.token_data * Types.var_name)
  | EXACT_MINUS of (Range.t * Types.token_data)
  | EXACT_TIMES of (Range.t * Types.token_data)
  | MOD of (Range.t * Types.token_data)
  | BEFORE of (Range.t * Types.token_data)
  | LNOT of (Range.t * Types.token_data)
  | EXACT_AMP of (Range.t * Types.token_data)
  | EXACT_TILDE of (Range.t * Types.token_data)
  | LPAREN of (Range.t * Types.token_data)
  | RPAREN of (Range.t * Types.token_data)
  | BVERTGRP of (Range.t * Types.token_data)
  | EVERTGRP of (Range.t * Types.token_data)
  | BHORZGRP of (Range.t * Types.token_data)
  | EHORZGRP of (Range.t * Types.token_data)
  | BMATHGRP of (Range.t * Types.token_data)
  | EMATHGRP of (Range.t * Types.token_data)
  | BPATH of (Range.t * Types.token_data)
  | EPATH of (Range.t * Types.token_data)
  | PATHLINE of (Range.t * Types.token_data)
  | PATHCURVE of (Range.t * Types.token_data)
  | CONTROLS of (Range.t * Types.token_data)
  | CYCLE of (Range.t * Types.token_data)
  | TRUE of (Range.t * Types.token_data)
  | FALSE of (Range.t * Types.token_data)
  | SEP of (Range.t * Types.token_data)
  | ENDACTIVE of (Range.t * Types.token_data)
  | COMMA of (Range.t * Types.token_data)
  | BLIST of (Range.t * Types.token_data)
  | LISTPUNCT of (Range.t * Types.token_data)
  | ELIST of (Range.t * Types.token_data)
  | CONS of (Range.t * Types.token_data)
  | BRECORD of (Range.t * Types.token_data)
  | ERECORD of (Range.t * Types.token_data)
  | ACCESS of (Range.t * Types.token_data)
  | WHILE of (Range.t * Types.token_data)
  | DO of (Range.t * Types.token_data)
  | HORZCMDTYPE of (Range.t * Types.token_data)
  | VERTCMDTYPE of (Range.t * Types.token_data)
  | MATHCMDTYPE of (Range.t * Types.token_data)
  | OPTIONAL of (Range.t * Types.token_data)
  | OMISSION of (Range.t * Types.token_data)
  | OPTIONALTYPE of (Range.t * Types.token_data)
  | OPTIONALARROW of (Range.t * Types.token_data)
  | ITEM of (Range.t * Types.token_data * int)
  | HEADER_REQUIRE of (Range.t * Types.token_data * string)
  | HEADER_IMPORT of (Range.t * Types.token_data * string)
  | HEADER_STAGE0 of (Range.t * Types.token_data)
  | HEADER_STAGE1 of (Range.t * Types.token_data)
  | HEADER_PERSISTENT0 of (Range.t * Types.token_data)
  | EOI of (Types.token_data)
  [@@deriving show]

